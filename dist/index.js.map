{"version":3,"file":"index.js","sources":["../hooks/useTabNotification/useTabNotification.ts"],"sourcesContent":["\"use client\"\r\n\r\n/**\r\n * @file useTabNotification.ts\r\n * @description A React hook that changes the tab title and favicon when the user switches to another tab.\r\n * Supports text, emoji, and image URLs for favicons.\r\n * @version 1.0.0\r\n * @license MIT\r\n */\r\n\r\nimport { useEffect, useRef, useState } from \"react\"\r\n\r\n/**\r\n * Configuration options for the useTabNotification hook\r\n *\r\n * @interface UseTabNotificationOptions\r\n * @property {string} [title] - The title to display when the tab is hidden or notification is active\r\n * @property {(string | EmojiConfig)[]} [favicons] - Array of favicon URLs or emoji configurations to cycle through\r\n * @property {number} [faviconInterval] - Interval in milliseconds for cycling through favicons (default: 1000ms)\r\n * @property {boolean} [manualTrigger] - If true, the notification will only be triggered manually, not on tab visibility change\r\n */\r\nexport interface UseTabNotificationOptions {\r\n  /** The title to display when the tab is hidden or notification is active */\r\n  title?: string\r\n  /** Array of favicon URLs or emoji configurations to cycle through */\r\n  favicons?: (string | EmojiConfig)[]\r\n  /** Interval in milliseconds for cycling through favicons (default: 1000ms) */\r\n  faviconInterval?: number\r\n  /** If true, the notification will only be triggered manually, not on tab visibility change */\r\n  manualTrigger?: boolean\r\n}\r\n\r\n/**\r\n * Configuration for emoji favicons\r\n *\r\n * @interface EmojiConfig\r\n * @property {string} emoji - The emoji character to use as favicon\r\n * @property {string} [backgroundColor] - Optional background color for the emoji (default: 'transparent')\r\n * @property {number} [size] - Optional size for the emoji favicon (default: 32)\r\n */\r\nexport interface EmojiConfig {\r\n  /** The emoji character to use as favicon */\r\n  emoji: string\r\n  /** Optional background color for the emoji (default: 'transparent') */\r\n  backgroundColor?: string\r\n  /** Optional size for the emoji favicon (default: 32) */\r\n  size?: number\r\n}\r\n\r\n/**\r\n * A React hook that changes the tab title and favicon when the user switches to another tab\r\n * or when manually triggered.\r\n *\r\n * @example\r\n * // Basic usage with just a title change\r\n * const { startNotification, stopNotification } = useTabNotification({\r\n *   title: \"Come back! ðŸ‘‹\",\r\n *   manualTrigger: true\r\n * });\r\n *\r\n * @example\r\n * // Advanced usage with emoji favicons\r\n * const { isActive } = useTabNotification({\r\n *   title: \"You have unread messages!\",\r\n *   favicons: [\r\n *     { emoji: \"ðŸ””\", backgroundColor: \"#0078d4\" },\r\n *     { emoji: \"ðŸ“¬\", backgroundColor: \"#0078d4\" }\r\n *   ],\r\n *   faviconInterval: 500 // Faster animation\r\n * });\r\n *\r\n * @param {UseTabNotificationOptions} options - Configuration options\r\n * @returns {Object} Control methods and state for the notification\r\n */\r\nexport function useTabNotification({\r\n  title: notificationTitle,\r\n  favicons: notificationFavicons = [],\r\n  faviconInterval = 1000,\r\n  manualTrigger = false,\r\n}: UseTabNotificationOptions = {}) {\r\n  // Track if the notification is currently active\r\n  const [isActive, setIsActive] = useState<boolean>(false)\r\n\r\n  // Store the original document title to restore it later\r\n  const originalTitleRef = useRef<string>(\"\")\r\n\r\n  // Store the original favicon elements to restore them later\r\n  const originalIconsRef = useRef<HTMLLinkElement[]>([])\r\n\r\n  // Track the current index in the favicons array\r\n  const faviconIndexRef = useRef<number>(0)\r\n\r\n  // Store the interval ID for the favicon animation\r\n  const intervalIdRef = useRef<number | null>(null)\r\n\r\n  /**\r\n   * Converts an emoji to a data URL that can be used as a favicon\r\n   *\r\n   * @param {string} emoji - The emoji character to convert\r\n   * @param {string} backgroundColor - Background color for the emoji\r\n   * @param {number} size - Size of the emoji favicon in pixels\r\n   * @returns {string} Data URL for the emoji favicon\r\n   */\r\n  const emojiToDataURL = (emoji: string, backgroundColor = \"transparent\", size = 32): string => {\r\n    // Create a canvas element to draw the emoji\r\n    const canvas = document.createElement(\"canvas\")\r\n    canvas.width = size\r\n    canvas.height = size\r\n\r\n    const ctx = canvas.getContext(\"2d\")\r\n    if (!ctx) return \"\"\r\n\r\n    // Fill background if specified\r\n    if (backgroundColor !== \"transparent\") {\r\n      ctx.fillStyle = backgroundColor\r\n      ctx.fillRect(0, 0, size, size)\r\n    }\r\n\r\n    // Draw the emoji centered on the canvas\r\n    ctx.textAlign = \"center\"\r\n    ctx.textBaseline = \"middle\"\r\n    ctx.font = `${Math.floor(size * 0.7)}px Arial`\r\n    ctx.fillText(emoji, size / 2, size / 2)\r\n\r\n    // Convert canvas to data URL\r\n    return canvas.toDataURL(\"image/png\")\r\n  }\r\n\r\n  /**\r\n   * Helper function to get existing favicon link elements or create new ones if none exist\r\n   * @returns {HTMLLinkElement[]} Array of favicon link elements\r\n   */\r\n  const ensureFaviconLinks = (): HTMLLinkElement[] => {\r\n    // Ensure we're in a browser environment\r\n    if (typeof document === \"undefined\") return []\r\n\r\n    const head = document.head || document.getElementsByTagName(\"head\")[0]\r\n    const existing: HTMLLinkElement[] = []\r\n\r\n    // Find all existing favicon links\r\n    Array.from(head.querySelectorAll('link[rel*=\"icon\"]')).forEach((link) => {\r\n      existing.push(link as HTMLLinkElement)\r\n    })\r\n\r\n    // If we found existing favicon links, return them\r\n    if (existing.length) return existing\r\n\r\n    // Otherwise, create default icons\r\n    const icon = document.createElement(\"link\")\r\n    icon.rel = \"icon\"\r\n    icon.type = \"image/x-icon\"\r\n    head.appendChild(icon)\r\n\r\n    const apple = document.createElement(\"link\")\r\n    apple.rel = \"apple-touch-icon\"\r\n    head.appendChild(apple)\r\n\r\n    return [icon, apple]\r\n  }\r\n\r\n  /**\r\n   * Sets a favicon URL or emoji to all favicon link elements\r\n   * @param {string | EmojiConfig} favicon - The favicon URL or emoji configuration to set\r\n   */\r\n  const setFavicon = (favicon: string | EmojiConfig): void => {\r\n    const links = ensureFaviconLinks()\r\n\r\n    // Convert the favicon to a URL if it's an emoji configuration\r\n    let faviconUrl: string\r\n    if (typeof favicon === \"string\") {\r\n      faviconUrl = favicon\r\n    } else {\r\n      // It's an emoji configuration\r\n      faviconUrl = emojiToDataURL(favicon.emoji, favicon.backgroundColor, favicon.size)\r\n    }\r\n\r\n    // Set the favicon URL to all link elements\r\n    links.forEach((link) => {\r\n      link.href = faviconUrl\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Starts the favicon animation cycle\r\n   */\r\n  const startFaviconAnimation = (): void => {\r\n    // Don't do anything if no favicons were provided\r\n    if (!notificationFavicons.length) return\r\n\r\n    // Reset the index and set the first favicon\r\n    faviconIndexRef.current = 0\r\n    setFavicon(notificationFavicons[0])\r\n\r\n    // Set up an interval to cycle through the favicons\r\n    intervalIdRef.current = window.setInterval(() => {\r\n      faviconIndexRef.current = (faviconIndexRef.current + 1) % notificationFavicons.length\r\n      setFavicon(notificationFavicons[faviconIndexRef.current])\r\n    }, faviconInterval)\r\n  }\r\n\r\n  /**\r\n   * Stops the favicon animation and restores the original favicons\r\n   */\r\n  const stopFaviconAnimation = (): void => {\r\n    // Clear the interval if it exists\r\n    if (intervalIdRef.current !== null) {\r\n      clearInterval(intervalIdRef.current)\r\n      intervalIdRef.current = null\r\n    }\r\n\r\n    // Restore original icons\r\n    originalIconsRef.current.forEach((orig, idx) => {\r\n      const currentLinks = ensureFaviconLinks()\r\n      if (currentLinks[idx]) currentLinks[idx].href = orig.href\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Starts the tab notification (changes title and favicon)\r\n   */\r\n  const startNotification = (): void => {\r\n    // Skip if already active or if we're not in a browser environment\r\n    if (isActive || typeof document === \"undefined\") return\r\n\r\n    // Save original title if not already saved\r\n    if (!originalTitleRef.current) {\r\n      originalTitleRef.current = document.title\r\n    }\r\n\r\n    // Save original favicons if not already saved\r\n    if (originalIconsRef.current.length === 0) {\r\n      originalIconsRef.current = ensureFaviconLinks().map((link) => link.cloneNode(true) as HTMLLinkElement)\r\n    }\r\n\r\n    // Change title if one was provided\r\n    if (notificationTitle) {\r\n      document.title = notificationTitle\r\n    }\r\n\r\n    // Start favicon animation if favicons were provided\r\n    if (notificationFavicons.length > 0) {\r\n      startFaviconAnimation()\r\n    }\r\n\r\n    // Update active state\r\n    setIsActive(true)\r\n  }\r\n\r\n  /**\r\n   * Stops the tab notification and restores the original title and favicon\r\n   */\r\n  const stopNotification = (): void => {\r\n    // Skip if not active or if we're not in a browser environment\r\n    if (!isActive || typeof document === \"undefined\") return\r\n\r\n    // Restore original title\r\n    document.title = originalTitleRef.current\r\n\r\n    // Stop animation & restore favicons\r\n    stopFaviconAnimation()\r\n\r\n    // Update active state\r\n    setIsActive(false)\r\n  }\r\n\r\n  /**\r\n   * Toggle the notification state\r\n   */\r\n  const toggleNotification = (): void => {\r\n    if (isActive) {\r\n      stopNotification()\r\n    } else {\r\n      startNotification()\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    // Skip if we're not in a browser environment\r\n    if (typeof document === \"undefined\") return\r\n\r\n    // Save original title\r\n    originalTitleRef.current = document.title\r\n\r\n    // Save original favicons\r\n    originalIconsRef.current = ensureFaviconLinks().map((link) => link.cloneNode(true) as HTMLLinkElement)\r\n\r\n    // If manual trigger is enabled, don't set up visibility change handler\r\n    if (manualTrigger) return\r\n\r\n    /**\r\n     * Handler for the visibilitychange event\r\n     * Changes the title and favicon when the tab is hidden,\r\n     * and restores them when the tab becomes visible again\r\n     */\r\n    const onVisibilityChange = (): void => {\r\n      if (document.hidden) {\r\n        startNotification()\r\n      } else {\r\n        stopNotification()\r\n      }\r\n    }\r\n\r\n    // Add event listener for tab visibility changes\r\n    document.addEventListener(\"visibilitychange\", onVisibilityChange)\r\n\r\n    // Clean up event listener and animations when the component unmounts\r\n    return () => {\r\n      document.removeEventListener(\"visibilitychange\", onVisibilityChange)\r\n      stopNotification()\r\n    }\r\n  }, [manualTrigger]) // Only re-run if manualTrigger changes\r\n\r\n  // Return control methods and state\r\n  return {\r\n    isActive,\r\n    startNotification,\r\n    stopNotification,\r\n    toggleNotification,\r\n  }\r\n}\r\n\r\n// Default export for easier importing\r\nexport default useTabNotification\r\n"],"names":["useState","useRef","useEffect"],"mappings":"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"}